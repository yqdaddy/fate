// Code generated by entc, DO NOT EDIT.

package character

import (
	"entgo.io/ent/dialect/sql"
	"github.com/godcong/fate/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Hash applies equality check predicate on the "hash" field. It's identical to HashEQ.
func Hash(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHash), v))
	})
}

// Ch applies equality check predicate on the "ch" field. It's identical to ChEQ.
func Ch(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCh), v))
	})
}

// ScienceStroke applies equality check predicate on the "science_stroke" field. It's identical to ScienceStrokeEQ.
func ScienceStroke(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScienceStroke), v))
	})
}

// Radical applies equality check predicate on the "radical" field. It's identical to RadicalEQ.
func Radical(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRadical), v))
	})
}

// RadicalStroke applies equality check predicate on the "radical_stroke" field. It's identical to RadicalStrokeEQ.
func RadicalStroke(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRadicalStroke), v))
	})
}

// Stroke applies equality check predicate on the "stroke" field. It's identical to StrokeEQ.
func Stroke(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStroke), v))
	})
}

// IsKangXi applies equality check predicate on the "is_kang_xi" field. It's identical to IsKangXiEQ.
func IsKangXi(v bool) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsKangXi), v))
	})
}

// KangXi applies equality check predicate on the "kang_xi" field. It's identical to KangXiEQ.
func KangXi(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKangXi), v))
	})
}

// KangXiStroke applies equality check predicate on the "kang_xi_stroke" field. It's identical to KangXiStrokeEQ.
func KangXiStroke(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKangXiStroke), v))
	})
}

// SimpleRadical applies equality check predicate on the "simple_radical" field. It's identical to SimpleRadicalEQ.
func SimpleRadical(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSimpleRadical), v))
	})
}

// SimpleRadicalStroke applies equality check predicate on the "simple_radical_stroke" field. It's identical to SimpleRadicalStrokeEQ.
func SimpleRadicalStroke(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSimpleRadicalStroke), v))
	})
}

// SimpleTotalStroke applies equality check predicate on the "simple_total_stroke" field. It's identical to SimpleTotalStrokeEQ.
func SimpleTotalStroke(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSimpleTotalStroke), v))
	})
}

// TraditionalRadical applies equality check predicate on the "traditional_radical" field. It's identical to TraditionalRadicalEQ.
func TraditionalRadical(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTraditionalRadical), v))
	})
}

// TraditionalRadicalStroke applies equality check predicate on the "traditional_radical_stroke" field. It's identical to TraditionalRadicalStrokeEQ.
func TraditionalRadicalStroke(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTraditionalRadicalStroke), v))
	})
}

// TraditionalTotalStroke applies equality check predicate on the "traditional_total_stroke" field. It's identical to TraditionalTotalStrokeEQ.
func TraditionalTotalStroke(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTraditionalTotalStroke), v))
	})
}

// IsNameScience applies equality check predicate on the "is_name_science" field. It's identical to IsNameScienceEQ.
func IsNameScience(v bool) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsNameScience), v))
	})
}

// WuXing applies equality check predicate on the "wu_xing" field. It's identical to WuXingEQ.
func WuXing(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWuXing), v))
	})
}

// Lucky applies equality check predicate on the "lucky" field. It's identical to LuckyEQ.
func Lucky(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLucky), v))
	})
}

// IsRegular applies equality check predicate on the "is_regular" field. It's identical to IsRegularEQ.
func IsRegular(v bool) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsRegular), v))
	})
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComment), v))
	})
}

// HashEQ applies the EQ predicate on the "hash" field.
func HashEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHash), v))
	})
}

// HashNEQ applies the NEQ predicate on the "hash" field.
func HashNEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHash), v))
	})
}

// HashIn applies the In predicate on the "hash" field.
func HashIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHash), v...))
	})
}

// HashNotIn applies the NotIn predicate on the "hash" field.
func HashNotIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHash), v...))
	})
}

// HashGT applies the GT predicate on the "hash" field.
func HashGT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHash), v))
	})
}

// HashGTE applies the GTE predicate on the "hash" field.
func HashGTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHash), v))
	})
}

// HashLT applies the LT predicate on the "hash" field.
func HashLT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHash), v))
	})
}

// HashLTE applies the LTE predicate on the "hash" field.
func HashLTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHash), v))
	})
}

// HashContains applies the Contains predicate on the "hash" field.
func HashContains(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHash), v))
	})
}

// HashHasPrefix applies the HasPrefix predicate on the "hash" field.
func HashHasPrefix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHash), v))
	})
}

// HashHasSuffix applies the HasSuffix predicate on the "hash" field.
func HashHasSuffix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHash), v))
	})
}

// HashEqualFold applies the EqualFold predicate on the "hash" field.
func HashEqualFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHash), v))
	})
}

// HashContainsFold applies the ContainsFold predicate on the "hash" field.
func HashContainsFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHash), v))
	})
}

// ChEQ applies the EQ predicate on the "ch" field.
func ChEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCh), v))
	})
}

// ChNEQ applies the NEQ predicate on the "ch" field.
func ChNEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCh), v))
	})
}

// ChIn applies the In predicate on the "ch" field.
func ChIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCh), v...))
	})
}

// ChNotIn applies the NotIn predicate on the "ch" field.
func ChNotIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCh), v...))
	})
}

// ChGT applies the GT predicate on the "ch" field.
func ChGT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCh), v))
	})
}

// ChGTE applies the GTE predicate on the "ch" field.
func ChGTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCh), v))
	})
}

// ChLT applies the LT predicate on the "ch" field.
func ChLT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCh), v))
	})
}

// ChLTE applies the LTE predicate on the "ch" field.
func ChLTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCh), v))
	})
}

// ChContains applies the Contains predicate on the "ch" field.
func ChContains(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCh), v))
	})
}

// ChHasPrefix applies the HasPrefix predicate on the "ch" field.
func ChHasPrefix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCh), v))
	})
}

// ChHasSuffix applies the HasSuffix predicate on the "ch" field.
func ChHasSuffix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCh), v))
	})
}

// ChEqualFold applies the EqualFold predicate on the "ch" field.
func ChEqualFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCh), v))
	})
}

// ChContainsFold applies the ContainsFold predicate on the "ch" field.
func ChContainsFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCh), v))
	})
}

// ScienceStrokeEQ applies the EQ predicate on the "science_stroke" field.
func ScienceStrokeEQ(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScienceStroke), v))
	})
}

// ScienceStrokeNEQ applies the NEQ predicate on the "science_stroke" field.
func ScienceStrokeNEQ(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldScienceStroke), v))
	})
}

// ScienceStrokeIn applies the In predicate on the "science_stroke" field.
func ScienceStrokeIn(vs ...int8) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldScienceStroke), v...))
	})
}

// ScienceStrokeNotIn applies the NotIn predicate on the "science_stroke" field.
func ScienceStrokeNotIn(vs ...int8) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldScienceStroke), v...))
	})
}

// ScienceStrokeGT applies the GT predicate on the "science_stroke" field.
func ScienceStrokeGT(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldScienceStroke), v))
	})
}

// ScienceStrokeGTE applies the GTE predicate on the "science_stroke" field.
func ScienceStrokeGTE(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldScienceStroke), v))
	})
}

// ScienceStrokeLT applies the LT predicate on the "science_stroke" field.
func ScienceStrokeLT(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldScienceStroke), v))
	})
}

// ScienceStrokeLTE applies the LTE predicate on the "science_stroke" field.
func ScienceStrokeLTE(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldScienceStroke), v))
	})
}

// RadicalEQ applies the EQ predicate on the "radical" field.
func RadicalEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRadical), v))
	})
}

// RadicalNEQ applies the NEQ predicate on the "radical" field.
func RadicalNEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRadical), v))
	})
}

// RadicalIn applies the In predicate on the "radical" field.
func RadicalIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRadical), v...))
	})
}

// RadicalNotIn applies the NotIn predicate on the "radical" field.
func RadicalNotIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRadical), v...))
	})
}

// RadicalGT applies the GT predicate on the "radical" field.
func RadicalGT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRadical), v))
	})
}

// RadicalGTE applies the GTE predicate on the "radical" field.
func RadicalGTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRadical), v))
	})
}

// RadicalLT applies the LT predicate on the "radical" field.
func RadicalLT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRadical), v))
	})
}

// RadicalLTE applies the LTE predicate on the "radical" field.
func RadicalLTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRadical), v))
	})
}

// RadicalContains applies the Contains predicate on the "radical" field.
func RadicalContains(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRadical), v))
	})
}

// RadicalHasPrefix applies the HasPrefix predicate on the "radical" field.
func RadicalHasPrefix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRadical), v))
	})
}

// RadicalHasSuffix applies the HasSuffix predicate on the "radical" field.
func RadicalHasSuffix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRadical), v))
	})
}

// RadicalEqualFold applies the EqualFold predicate on the "radical" field.
func RadicalEqualFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRadical), v))
	})
}

// RadicalContainsFold applies the ContainsFold predicate on the "radical" field.
func RadicalContainsFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRadical), v))
	})
}

// RadicalStrokeEQ applies the EQ predicate on the "radical_stroke" field.
func RadicalStrokeEQ(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRadicalStroke), v))
	})
}

// RadicalStrokeNEQ applies the NEQ predicate on the "radical_stroke" field.
func RadicalStrokeNEQ(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRadicalStroke), v))
	})
}

// RadicalStrokeIn applies the In predicate on the "radical_stroke" field.
func RadicalStrokeIn(vs ...int8) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRadicalStroke), v...))
	})
}

// RadicalStrokeNotIn applies the NotIn predicate on the "radical_stroke" field.
func RadicalStrokeNotIn(vs ...int8) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRadicalStroke), v...))
	})
}

// RadicalStrokeGT applies the GT predicate on the "radical_stroke" field.
func RadicalStrokeGT(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRadicalStroke), v))
	})
}

// RadicalStrokeGTE applies the GTE predicate on the "radical_stroke" field.
func RadicalStrokeGTE(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRadicalStroke), v))
	})
}

// RadicalStrokeLT applies the LT predicate on the "radical_stroke" field.
func RadicalStrokeLT(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRadicalStroke), v))
	})
}

// RadicalStrokeLTE applies the LTE predicate on the "radical_stroke" field.
func RadicalStrokeLTE(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRadicalStroke), v))
	})
}

// StrokeEQ applies the EQ predicate on the "stroke" field.
func StrokeEQ(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStroke), v))
	})
}

// StrokeNEQ applies the NEQ predicate on the "stroke" field.
func StrokeNEQ(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStroke), v))
	})
}

// StrokeIn applies the In predicate on the "stroke" field.
func StrokeIn(vs ...int8) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStroke), v...))
	})
}

// StrokeNotIn applies the NotIn predicate on the "stroke" field.
func StrokeNotIn(vs ...int8) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStroke), v...))
	})
}

// StrokeGT applies the GT predicate on the "stroke" field.
func StrokeGT(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStroke), v))
	})
}

// StrokeGTE applies the GTE predicate on the "stroke" field.
func StrokeGTE(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStroke), v))
	})
}

// StrokeLT applies the LT predicate on the "stroke" field.
func StrokeLT(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStroke), v))
	})
}

// StrokeLTE applies the LTE predicate on the "stroke" field.
func StrokeLTE(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStroke), v))
	})
}

// IsKangXiEQ applies the EQ predicate on the "is_kang_xi" field.
func IsKangXiEQ(v bool) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsKangXi), v))
	})
}

// IsKangXiNEQ applies the NEQ predicate on the "is_kang_xi" field.
func IsKangXiNEQ(v bool) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsKangXi), v))
	})
}

// KangXiEQ applies the EQ predicate on the "kang_xi" field.
func KangXiEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKangXi), v))
	})
}

// KangXiNEQ applies the NEQ predicate on the "kang_xi" field.
func KangXiNEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKangXi), v))
	})
}

// KangXiIn applies the In predicate on the "kang_xi" field.
func KangXiIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldKangXi), v...))
	})
}

// KangXiNotIn applies the NotIn predicate on the "kang_xi" field.
func KangXiNotIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldKangXi), v...))
	})
}

// KangXiGT applies the GT predicate on the "kang_xi" field.
func KangXiGT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKangXi), v))
	})
}

// KangXiGTE applies the GTE predicate on the "kang_xi" field.
func KangXiGTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKangXi), v))
	})
}

// KangXiLT applies the LT predicate on the "kang_xi" field.
func KangXiLT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKangXi), v))
	})
}

// KangXiLTE applies the LTE predicate on the "kang_xi" field.
func KangXiLTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKangXi), v))
	})
}

// KangXiContains applies the Contains predicate on the "kang_xi" field.
func KangXiContains(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldKangXi), v))
	})
}

// KangXiHasPrefix applies the HasPrefix predicate on the "kang_xi" field.
func KangXiHasPrefix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldKangXi), v))
	})
}

// KangXiHasSuffix applies the HasSuffix predicate on the "kang_xi" field.
func KangXiHasSuffix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldKangXi), v))
	})
}

// KangXiEqualFold applies the EqualFold predicate on the "kang_xi" field.
func KangXiEqualFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldKangXi), v))
	})
}

// KangXiContainsFold applies the ContainsFold predicate on the "kang_xi" field.
func KangXiContainsFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldKangXi), v))
	})
}

// KangXiStrokeEQ applies the EQ predicate on the "kang_xi_stroke" field.
func KangXiStrokeEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKangXiStroke), v))
	})
}

// KangXiStrokeNEQ applies the NEQ predicate on the "kang_xi_stroke" field.
func KangXiStrokeNEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKangXiStroke), v))
	})
}

// KangXiStrokeIn applies the In predicate on the "kang_xi_stroke" field.
func KangXiStrokeIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldKangXiStroke), v...))
	})
}

// KangXiStrokeNotIn applies the NotIn predicate on the "kang_xi_stroke" field.
func KangXiStrokeNotIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldKangXiStroke), v...))
	})
}

// KangXiStrokeGT applies the GT predicate on the "kang_xi_stroke" field.
func KangXiStrokeGT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKangXiStroke), v))
	})
}

// KangXiStrokeGTE applies the GTE predicate on the "kang_xi_stroke" field.
func KangXiStrokeGTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKangXiStroke), v))
	})
}

// KangXiStrokeLT applies the LT predicate on the "kang_xi_stroke" field.
func KangXiStrokeLT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKangXiStroke), v))
	})
}

// KangXiStrokeLTE applies the LTE predicate on the "kang_xi_stroke" field.
func KangXiStrokeLTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKangXiStroke), v))
	})
}

// KangXiStrokeContains applies the Contains predicate on the "kang_xi_stroke" field.
func KangXiStrokeContains(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldKangXiStroke), v))
	})
}

// KangXiStrokeHasPrefix applies the HasPrefix predicate on the "kang_xi_stroke" field.
func KangXiStrokeHasPrefix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldKangXiStroke), v))
	})
}

// KangXiStrokeHasSuffix applies the HasSuffix predicate on the "kang_xi_stroke" field.
func KangXiStrokeHasSuffix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldKangXiStroke), v))
	})
}

// KangXiStrokeEqualFold applies the EqualFold predicate on the "kang_xi_stroke" field.
func KangXiStrokeEqualFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldKangXiStroke), v))
	})
}

// KangXiStrokeContainsFold applies the ContainsFold predicate on the "kang_xi_stroke" field.
func KangXiStrokeContainsFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldKangXiStroke), v))
	})
}

// SimpleRadicalEQ applies the EQ predicate on the "simple_radical" field.
func SimpleRadicalEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSimpleRadical), v))
	})
}

// SimpleRadicalNEQ applies the NEQ predicate on the "simple_radical" field.
func SimpleRadicalNEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSimpleRadical), v))
	})
}

// SimpleRadicalIn applies the In predicate on the "simple_radical" field.
func SimpleRadicalIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSimpleRadical), v...))
	})
}

// SimpleRadicalNotIn applies the NotIn predicate on the "simple_radical" field.
func SimpleRadicalNotIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSimpleRadical), v...))
	})
}

// SimpleRadicalGT applies the GT predicate on the "simple_radical" field.
func SimpleRadicalGT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSimpleRadical), v))
	})
}

// SimpleRadicalGTE applies the GTE predicate on the "simple_radical" field.
func SimpleRadicalGTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSimpleRadical), v))
	})
}

// SimpleRadicalLT applies the LT predicate on the "simple_radical" field.
func SimpleRadicalLT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSimpleRadical), v))
	})
}

// SimpleRadicalLTE applies the LTE predicate on the "simple_radical" field.
func SimpleRadicalLTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSimpleRadical), v))
	})
}

// SimpleRadicalContains applies the Contains predicate on the "simple_radical" field.
func SimpleRadicalContains(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSimpleRadical), v))
	})
}

// SimpleRadicalHasPrefix applies the HasPrefix predicate on the "simple_radical" field.
func SimpleRadicalHasPrefix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSimpleRadical), v))
	})
}

// SimpleRadicalHasSuffix applies the HasSuffix predicate on the "simple_radical" field.
func SimpleRadicalHasSuffix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSimpleRadical), v))
	})
}

// SimpleRadicalEqualFold applies the EqualFold predicate on the "simple_radical" field.
func SimpleRadicalEqualFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSimpleRadical), v))
	})
}

// SimpleRadicalContainsFold applies the ContainsFold predicate on the "simple_radical" field.
func SimpleRadicalContainsFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSimpleRadical), v))
	})
}

// SimpleRadicalStrokeEQ applies the EQ predicate on the "simple_radical_stroke" field.
func SimpleRadicalStrokeEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSimpleRadicalStroke), v))
	})
}

// SimpleRadicalStrokeNEQ applies the NEQ predicate on the "simple_radical_stroke" field.
func SimpleRadicalStrokeNEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSimpleRadicalStroke), v))
	})
}

// SimpleRadicalStrokeIn applies the In predicate on the "simple_radical_stroke" field.
func SimpleRadicalStrokeIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSimpleRadicalStroke), v...))
	})
}

// SimpleRadicalStrokeNotIn applies the NotIn predicate on the "simple_radical_stroke" field.
func SimpleRadicalStrokeNotIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSimpleRadicalStroke), v...))
	})
}

// SimpleRadicalStrokeGT applies the GT predicate on the "simple_radical_stroke" field.
func SimpleRadicalStrokeGT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSimpleRadicalStroke), v))
	})
}

// SimpleRadicalStrokeGTE applies the GTE predicate on the "simple_radical_stroke" field.
func SimpleRadicalStrokeGTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSimpleRadicalStroke), v))
	})
}

// SimpleRadicalStrokeLT applies the LT predicate on the "simple_radical_stroke" field.
func SimpleRadicalStrokeLT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSimpleRadicalStroke), v))
	})
}

// SimpleRadicalStrokeLTE applies the LTE predicate on the "simple_radical_stroke" field.
func SimpleRadicalStrokeLTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSimpleRadicalStroke), v))
	})
}

// SimpleRadicalStrokeContains applies the Contains predicate on the "simple_radical_stroke" field.
func SimpleRadicalStrokeContains(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSimpleRadicalStroke), v))
	})
}

// SimpleRadicalStrokeHasPrefix applies the HasPrefix predicate on the "simple_radical_stroke" field.
func SimpleRadicalStrokeHasPrefix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSimpleRadicalStroke), v))
	})
}

// SimpleRadicalStrokeHasSuffix applies the HasSuffix predicate on the "simple_radical_stroke" field.
func SimpleRadicalStrokeHasSuffix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSimpleRadicalStroke), v))
	})
}

// SimpleRadicalStrokeEqualFold applies the EqualFold predicate on the "simple_radical_stroke" field.
func SimpleRadicalStrokeEqualFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSimpleRadicalStroke), v))
	})
}

// SimpleRadicalStrokeContainsFold applies the ContainsFold predicate on the "simple_radical_stroke" field.
func SimpleRadicalStrokeContainsFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSimpleRadicalStroke), v))
	})
}

// SimpleTotalStrokeEQ applies the EQ predicate on the "simple_total_stroke" field.
func SimpleTotalStrokeEQ(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSimpleTotalStroke), v))
	})
}

// SimpleTotalStrokeNEQ applies the NEQ predicate on the "simple_total_stroke" field.
func SimpleTotalStrokeNEQ(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSimpleTotalStroke), v))
	})
}

// SimpleTotalStrokeIn applies the In predicate on the "simple_total_stroke" field.
func SimpleTotalStrokeIn(vs ...int8) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSimpleTotalStroke), v...))
	})
}

// SimpleTotalStrokeNotIn applies the NotIn predicate on the "simple_total_stroke" field.
func SimpleTotalStrokeNotIn(vs ...int8) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSimpleTotalStroke), v...))
	})
}

// SimpleTotalStrokeGT applies the GT predicate on the "simple_total_stroke" field.
func SimpleTotalStrokeGT(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSimpleTotalStroke), v))
	})
}

// SimpleTotalStrokeGTE applies the GTE predicate on the "simple_total_stroke" field.
func SimpleTotalStrokeGTE(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSimpleTotalStroke), v))
	})
}

// SimpleTotalStrokeLT applies the LT predicate on the "simple_total_stroke" field.
func SimpleTotalStrokeLT(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSimpleTotalStroke), v))
	})
}

// SimpleTotalStrokeLTE applies the LTE predicate on the "simple_total_stroke" field.
func SimpleTotalStrokeLTE(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSimpleTotalStroke), v))
	})
}

// TraditionalRadicalEQ applies the EQ predicate on the "traditional_radical" field.
func TraditionalRadicalEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTraditionalRadical), v))
	})
}

// TraditionalRadicalNEQ applies the NEQ predicate on the "traditional_radical" field.
func TraditionalRadicalNEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTraditionalRadical), v))
	})
}

// TraditionalRadicalIn applies the In predicate on the "traditional_radical" field.
func TraditionalRadicalIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTraditionalRadical), v...))
	})
}

// TraditionalRadicalNotIn applies the NotIn predicate on the "traditional_radical" field.
func TraditionalRadicalNotIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTraditionalRadical), v...))
	})
}

// TraditionalRadicalGT applies the GT predicate on the "traditional_radical" field.
func TraditionalRadicalGT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTraditionalRadical), v))
	})
}

// TraditionalRadicalGTE applies the GTE predicate on the "traditional_radical" field.
func TraditionalRadicalGTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTraditionalRadical), v))
	})
}

// TraditionalRadicalLT applies the LT predicate on the "traditional_radical" field.
func TraditionalRadicalLT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTraditionalRadical), v))
	})
}

// TraditionalRadicalLTE applies the LTE predicate on the "traditional_radical" field.
func TraditionalRadicalLTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTraditionalRadical), v))
	})
}

// TraditionalRadicalContains applies the Contains predicate on the "traditional_radical" field.
func TraditionalRadicalContains(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTraditionalRadical), v))
	})
}

// TraditionalRadicalHasPrefix applies the HasPrefix predicate on the "traditional_radical" field.
func TraditionalRadicalHasPrefix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTraditionalRadical), v))
	})
}

// TraditionalRadicalHasSuffix applies the HasSuffix predicate on the "traditional_radical" field.
func TraditionalRadicalHasSuffix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTraditionalRadical), v))
	})
}

// TraditionalRadicalEqualFold applies the EqualFold predicate on the "traditional_radical" field.
func TraditionalRadicalEqualFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTraditionalRadical), v))
	})
}

// TraditionalRadicalContainsFold applies the ContainsFold predicate on the "traditional_radical" field.
func TraditionalRadicalContainsFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTraditionalRadical), v))
	})
}

// TraditionalRadicalStrokeEQ applies the EQ predicate on the "traditional_radical_stroke" field.
func TraditionalRadicalStrokeEQ(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTraditionalRadicalStroke), v))
	})
}

// TraditionalRadicalStrokeNEQ applies the NEQ predicate on the "traditional_radical_stroke" field.
func TraditionalRadicalStrokeNEQ(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTraditionalRadicalStroke), v))
	})
}

// TraditionalRadicalStrokeIn applies the In predicate on the "traditional_radical_stroke" field.
func TraditionalRadicalStrokeIn(vs ...int8) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTraditionalRadicalStroke), v...))
	})
}

// TraditionalRadicalStrokeNotIn applies the NotIn predicate on the "traditional_radical_stroke" field.
func TraditionalRadicalStrokeNotIn(vs ...int8) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTraditionalRadicalStroke), v...))
	})
}

// TraditionalRadicalStrokeGT applies the GT predicate on the "traditional_radical_stroke" field.
func TraditionalRadicalStrokeGT(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTraditionalRadicalStroke), v))
	})
}

// TraditionalRadicalStrokeGTE applies the GTE predicate on the "traditional_radical_stroke" field.
func TraditionalRadicalStrokeGTE(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTraditionalRadicalStroke), v))
	})
}

// TraditionalRadicalStrokeLT applies the LT predicate on the "traditional_radical_stroke" field.
func TraditionalRadicalStrokeLT(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTraditionalRadicalStroke), v))
	})
}

// TraditionalRadicalStrokeLTE applies the LTE predicate on the "traditional_radical_stroke" field.
func TraditionalRadicalStrokeLTE(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTraditionalRadicalStroke), v))
	})
}

// TraditionalTotalStrokeEQ applies the EQ predicate on the "traditional_total_stroke" field.
func TraditionalTotalStrokeEQ(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTraditionalTotalStroke), v))
	})
}

// TraditionalTotalStrokeNEQ applies the NEQ predicate on the "traditional_total_stroke" field.
func TraditionalTotalStrokeNEQ(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTraditionalTotalStroke), v))
	})
}

// TraditionalTotalStrokeIn applies the In predicate on the "traditional_total_stroke" field.
func TraditionalTotalStrokeIn(vs ...int8) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTraditionalTotalStroke), v...))
	})
}

// TraditionalTotalStrokeNotIn applies the NotIn predicate on the "traditional_total_stroke" field.
func TraditionalTotalStrokeNotIn(vs ...int8) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTraditionalTotalStroke), v...))
	})
}

// TraditionalTotalStrokeGT applies the GT predicate on the "traditional_total_stroke" field.
func TraditionalTotalStrokeGT(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTraditionalTotalStroke), v))
	})
}

// TraditionalTotalStrokeGTE applies the GTE predicate on the "traditional_total_stroke" field.
func TraditionalTotalStrokeGTE(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTraditionalTotalStroke), v))
	})
}

// TraditionalTotalStrokeLT applies the LT predicate on the "traditional_total_stroke" field.
func TraditionalTotalStrokeLT(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTraditionalTotalStroke), v))
	})
}

// TraditionalTotalStrokeLTE applies the LTE predicate on the "traditional_total_stroke" field.
func TraditionalTotalStrokeLTE(v int8) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTraditionalTotalStroke), v))
	})
}

// IsNameScienceEQ applies the EQ predicate on the "is_name_science" field.
func IsNameScienceEQ(v bool) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsNameScience), v))
	})
}

// IsNameScienceNEQ applies the NEQ predicate on the "is_name_science" field.
func IsNameScienceNEQ(v bool) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsNameScience), v))
	})
}

// WuXingEQ applies the EQ predicate on the "wu_xing" field.
func WuXingEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWuXing), v))
	})
}

// WuXingNEQ applies the NEQ predicate on the "wu_xing" field.
func WuXingNEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWuXing), v))
	})
}

// WuXingIn applies the In predicate on the "wu_xing" field.
func WuXingIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWuXing), v...))
	})
}

// WuXingNotIn applies the NotIn predicate on the "wu_xing" field.
func WuXingNotIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWuXing), v...))
	})
}

// WuXingGT applies the GT predicate on the "wu_xing" field.
func WuXingGT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWuXing), v))
	})
}

// WuXingGTE applies the GTE predicate on the "wu_xing" field.
func WuXingGTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWuXing), v))
	})
}

// WuXingLT applies the LT predicate on the "wu_xing" field.
func WuXingLT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWuXing), v))
	})
}

// WuXingLTE applies the LTE predicate on the "wu_xing" field.
func WuXingLTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWuXing), v))
	})
}

// WuXingContains applies the Contains predicate on the "wu_xing" field.
func WuXingContains(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWuXing), v))
	})
}

// WuXingHasPrefix applies the HasPrefix predicate on the "wu_xing" field.
func WuXingHasPrefix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWuXing), v))
	})
}

// WuXingHasSuffix applies the HasSuffix predicate on the "wu_xing" field.
func WuXingHasSuffix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWuXing), v))
	})
}

// WuXingEqualFold applies the EqualFold predicate on the "wu_xing" field.
func WuXingEqualFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWuXing), v))
	})
}

// WuXingContainsFold applies the ContainsFold predicate on the "wu_xing" field.
func WuXingContainsFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWuXing), v))
	})
}

// LuckyEQ applies the EQ predicate on the "lucky" field.
func LuckyEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLucky), v))
	})
}

// LuckyNEQ applies the NEQ predicate on the "lucky" field.
func LuckyNEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLucky), v))
	})
}

// LuckyIn applies the In predicate on the "lucky" field.
func LuckyIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLucky), v...))
	})
}

// LuckyNotIn applies the NotIn predicate on the "lucky" field.
func LuckyNotIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLucky), v...))
	})
}

// LuckyGT applies the GT predicate on the "lucky" field.
func LuckyGT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLucky), v))
	})
}

// LuckyGTE applies the GTE predicate on the "lucky" field.
func LuckyGTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLucky), v))
	})
}

// LuckyLT applies the LT predicate on the "lucky" field.
func LuckyLT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLucky), v))
	})
}

// LuckyLTE applies the LTE predicate on the "lucky" field.
func LuckyLTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLucky), v))
	})
}

// LuckyContains applies the Contains predicate on the "lucky" field.
func LuckyContains(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLucky), v))
	})
}

// LuckyHasPrefix applies the HasPrefix predicate on the "lucky" field.
func LuckyHasPrefix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLucky), v))
	})
}

// LuckyHasSuffix applies the HasSuffix predicate on the "lucky" field.
func LuckyHasSuffix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLucky), v))
	})
}

// LuckyEqualFold applies the EqualFold predicate on the "lucky" field.
func LuckyEqualFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLucky), v))
	})
}

// LuckyContainsFold applies the ContainsFold predicate on the "lucky" field.
func LuckyContainsFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLucky), v))
	})
}

// IsRegularEQ applies the EQ predicate on the "is_regular" field.
func IsRegularEQ(v bool) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsRegular), v))
	})
}

// IsRegularNEQ applies the NEQ predicate on the "is_regular" field.
func IsRegularNEQ(v bool) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsRegular), v))
	})
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComment), v))
	})
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldComment), v))
	})
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldComment), v...))
	})
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldComment), v...))
	})
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldComment), v))
	})
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldComment), v))
	})
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldComment), v))
	})
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldComment), v))
	})
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldComment), v))
	})
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldComment), v))
	})
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldComment), v))
	})
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldComment), v))
	})
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldComment), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Character) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Character) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Character) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		p(s.Not())
	})
}
